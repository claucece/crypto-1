package curve

import (
	"testing"

	. "gopkg.in/check.v1"
)

func Test(t *testing.T) { TestingT(t) }

type AppenderSuite struct{}

var _ = Suite(&AppenderSuite{})

var (
	testPubA = Ed448GoldPoint(
		[16]uint32{
			0x06808e72, 0x0ce35b11, 0x0e5e2f5c, 0x0b88b4d4,
			0x0869c12a, 0x04414132, 0x0bb898a8, 0x07c1e17c,
			0x0f04e50e, 0x068bad3b, 0x05c8d2b1, 0x0682f5cb,
			0x0a6b80e2, 0x0519b3a5, 0x045b7bec, 0x02b1b0d6,
		},
		[16]uint32{
			0x059d303a, 0x072683d3, 0x01b3a38d, 0x0b73118c,
			0x05dc7e0e, 0x0cd643d7, 0x09575347, 0x0e7653ae,
			0x0c59d3e1, 0x00d2a8d6, 0x0d9d3cb6, 0x0539c8ab,
			0x0d2cdc35, 0x03e95ff4, 0x0ca0a361, 0x0d6b571f,
		},
		[16]uint32{
			0x028916ca, 0x024a5ca9, 0x0ff426c7, 0x093dda43,
			0x0781af41, 0x07ec215e, 0x0e3deaef, 0x05963af4,
			0x0f1db9f4, 0x0018b7b8, 0x020b8cb8, 0x0e497381,
			0x0b98d304, 0x0750e83f, 0x00d61916, 0x0f0809f0,
		},
		[16]uint32{
			0x04b92c3b, 0x0d44025b, 0x09d68237, 0x0efa91f3,
			0x080def8c, 0x08703dcb, 0x0e39b56a, 0x0e3017a0,
			0x05ecb8cc, 0x0cd53123, 0x0c69b8db, 0x0fde3887,
			0x0cb571d9, 0x0e0580f7, 0x0b44788e, 0x087c0443,
		},
	)

	testPrivA = Ed448GoldScalar([]byte{
		0xa3, 0xf8, 0xe, 0xb2, 0xa6, 0x99, 0x23, 0x9a,
		0x81, 0x9b, 0x5e, 0xc3, 0x30, 0xce, 0xd7, 0x49,
		0x7b, 0xdb, 0x3b, 0xe7, 0x0d, 0xd0, 0x91, 0xec,
		0x6e, 0xc6, 0xd7, 0xdc, 0xd1, 0xd3, 0xe2, 0x68,
		0xd5, 0xf1, 0xcc, 0xd6, 0x2f, 0x87, 0xb0, 0x27,
		0xd7, 0x59, 0x89, 0x65, 0x02, 0x16, 0xec, 0x5a,
		0x0f, 0x84, 0x1a, 0xbe, 0xda, 0xa1, 0x88, 0x02,
	})
)

func (s *AppenderSuite) Test_AppendBytes(c *C) {
	empty := []byte{}
	bs := []byte{
		0x04, 0x2a, 0xf3, 0xcc, 0x69, 0xbb, 0xa1, 0x50,
	}

	exp := []byte{
		0x04, 0x2a, 0xf3, 0xcc, 0x69, 0xbb, 0xa1, 0x50,
		0xa3, 0xf8, 0x0e, 0xb2, 0xa6, 0x99, 0x23, 0x9a,
		0x81, 0x9b, 0x5e, 0xc3, 0x30, 0xce, 0xd7, 0x49,
		0x7b, 0xdb, 0x3b, 0xe7, 0x0d, 0xd0, 0x91, 0xec,
		0x6e, 0xc6, 0xd7, 0xdc, 0xd1, 0xd3, 0xe2, 0x68,
		0xd5, 0xf1, 0xcc, 0xd6, 0x2f, 0x87, 0xb0, 0x27,
		0xd7, 0x59, 0x89, 0x65, 0x02, 0x16, 0xec, 0x5a,
		0x0f, 0x84, 0x1a, 0xbe, 0xda, 0xa1, 0x88, 0x02,
		0xd8, 0x8c, 0xc8, 0xae, 0x88, 0xeb, 0xcb, 0xbd,
		0x73, 0xcc, 0x8c, 0x4c, 0x87, 0xc8, 0xd8, 0x0d,
		0x27, 0x7e, 0xb3, 0xd8, 0xe1, 0x1d, 0x55, 0x35,
		0xdf, 0x42, 0x38, 0xf2, 0x4f, 0x65, 0xf5, 0x31,
		0xc1, 0x35, 0x3b, 0x6a, 0x3a, 0x0a, 0x7b, 0x3b,
		0x6d, 0x4c, 0x6e, 0xd7, 0xfc, 0x53, 0xa0, 0x3b,
		0xba, 0xfe, 0xda, 0x5b, 0xd1, 0x63, 0x8d, 0x3a,
	}

	c.Assert(func() { Append() }, Panics, "programmer error: missing append arguments")
	c.Assert(func() { Append(bs) }, Panics, "programmer error: missing append arguments")
	c.Assert(func() { Append("not a valid input", bs) }, Panics, "programmer error: invalid input")
	c.Assert(Append(empty, bs, testPrivA, testPubA), DeepEquals, exp)
}
