package cramershoup

import (
	"crypto/rand"
	"errors"
	"testing"

	. "gopkg.in/check.v1"

	"github.com/twtiger/crypto/curve"
	"github.com/twtiger/crypto/testHelpers"
)

func Test(t *testing.T) { TestingT(t) }

type CSSuite struct{}

var _ = Suite(&CSSuite{})

var (
	csRandData = []byte{
		// x1
		0x40, 0x80, 0x66, 0x2d, 0xd8, 0xe7, 0xf0, 0x9c,
		0xdf, 0xb0, 0x4e, 0x1c, 0x6e, 0x12, 0x62, 0xa3,
		0x7c, 0x31, 0x9a, 0xe1, 0xe7, 0x86, 0x87, 0xcc,
		0x82, 0x05, 0x78, 0xe6, 0x44, 0x2f, 0x4f, 0x77,
		0x0e, 0xd1, 0xb4, 0x48, 0xa6, 0x05, 0x90, 0x5e,
		0xe7, 0xba, 0xfc, 0x25, 0x99, 0x99, 0xb8, 0xc3,
		0x90, 0x3e, 0xf4, 0xa3, 0x75, 0xee, 0x85, 0x32,
		// x2
		0x16, 0xb1, 0x06, 0x5b, 0x81, 0xea, 0xac, 0xb3,
		0x69, 0x47, 0x6d, 0xa2, 0xaa, 0x86, 0x0b, 0xe5,
		0xcd, 0xac, 0x43, 0xd7, 0xb7, 0xe3, 0xb0, 0x85,
		0xd8, 0x66, 0xf9, 0xb6, 0x45, 0x2e, 0x81, 0x43,
		0xc2, 0x6f, 0x61, 0xc4, 0xdd, 0x65, 0x35, 0xa4,
		0xa4, 0xf9, 0x55, 0xf0, 0xf9, 0xd2, 0xf4, 0xb7,
		0xa4, 0xf9, 0x55, 0xf0, 0xf9, 0xd2, 0xf4, 0xb7,
		// y1
		0x52, 0x18, 0x41, 0x48, 0x60, 0x2d, 0x67, 0x8a,
		0xd3, 0xf3, 0xd2, 0xa4, 0xfd, 0x6f, 0x64, 0xf3,
		0x72, 0x82, 0xb0, 0x6a, 0x4d, 0xea, 0x9c, 0xef,
		0x99, 0x05, 0xe1, 0x8d, 0xaf, 0x2d, 0xdb, 0x52,
		0x57, 0x00, 0xac, 0x45, 0x24, 0x24, 0xb4, 0x79,
		0x02, 0x5f, 0x99, 0x70, 0x95, 0x2a, 0x90, 0x08,
		0x02, 0x5f, 0x99, 0x70, 0x95, 0x2a, 0x90, 0x08,
		// y2
		0x51, 0x5b, 0x69, 0x03, 0xd5, 0x77, 0xb0, 0x77,
		0x35, 0x1f, 0x1b, 0x2d, 0xb1, 0x26, 0xf1, 0x69,
		0x3b, 0xcc, 0x4b, 0x0a, 0x95, 0x83, 0xd7, 0xec,
		0xfa, 0x8c, 0xf7, 0x80, 0xbe, 0x9b, 0x6d, 0xb4,
		0xc3, 0x24, 0x3c, 0x94, 0x9b, 0x63, 0xbc, 0x89,
		0xbc, 0x09, 0x39, 0xb8, 0xbf, 0xa2, 0x9b, 0xf4,
		0x3a, 0xa2, 0x9b, 0xbe, 0x6e, 0x78, 0x7b, 0x11,
		// z
		0x66, 0x60, 0x01, 0xb9, 0x83, 0x10, 0xd5, 0x7d,
		0xe4, 0x86, 0x58, 0x0a, 0x42, 0xd2, 0x2a, 0x74,
		0xe9, 0x5d, 0x77, 0xc4, 0x08, 0x46, 0x31, 0xb4,
		0x75, 0x1b, 0xf2, 0x67, 0x23, 0x19, 0x5e, 0xb6,
		0xfc, 0xe8, 0xd1, 0x38, 0x81, 0xa3, 0x98, 0x41,
		0xdf, 0xdf, 0x5d, 0x8d, 0x41, 0xb4, 0x66, 0x0f,
		0x39, 0xe1, 0x6f, 0x8c, 0x89, 0xed, 0xf6, 0x11,
	}

	message = []byte{
		0xfd, 0xf1, 0x18, 0xbf, 0x8e, 0xc9, 0x64, 0xc7,
		0x94, 0x46, 0x49, 0xda, 0xcd, 0xac, 0x2c, 0xff,
		0x72, 0x5e, 0xb7, 0x61, 0x46, 0xf1, 0x93, 0xa6,
		0x70, 0x81, 0x64, 0x37, 0x7c, 0xec, 0x6c, 0xe5,
		0xc6, 0x8d, 0x8f, 0xa0, 0x43, 0x23, 0x45, 0x33,
		0x73, 0x79, 0xa6, 0x48, 0x57, 0xbb, 0x0f, 0x70,
		0x63, 0x8c, 0x62, 0x26, 0x9e, 0x17, 0x5d, 0x22,
	}

	testPub = &PublicKey{
		// c
		curve.Ed448GoldPoint(
			[16]uint32{
				0x03ec8f96, 0x0d40670b, 0x0ac03fe7, 0x0956b651,
				0x0145e610, 0x03c89f01, 0x0a22e379, 0x0b0f5279,
				0x07fe2e6b, 0x0053b1ba, 0x072b1f72, 0x0cb078af,
				0x035a049b, 0x07e768e3, 0x01860b6a, 0x0762aebf,
			},
			[16]uint32{
				0x0c5319c5, 0x0a858447, 0x09609079, 0x02b2d222,
				0x0b3d6a8d, 0x041554d7, 0x0baf026e, 0x0129aac5,
				0x0b69553c, 0x04318fb5, 0x0ef1fc50, 0x07f45076,
				0x00d3c501, 0x0ef75db9, 0x008a0370, 0x095a0f3d,
			},
			[16]uint32{
				0x0550719b, 0x0597cebc, 0x0b44b3a7, 0x02dd5c82,
				0x0709fbe3, 0x0dcd450f, 0x013e75ec, 0x08a35968,
				0x02d1073c, 0x0731abc2, 0x0e1abb8e, 0x01e01b38,
				0x00c8a515, 0x0fa7ff47, 0x05ec3cc5, 0x0efe9e8e,
			},
			[16]uint32{
				0x01d3e461, 0x0a4f4114, 0x06f31b7e, 0x02fe6996,
				0x0f0602a8, 0x0d550a82, 0x00aaea26, 0x0e741792,
				0x0d0d9c93, 0x0847f70c, 0x0fd814b1, 0x022a9768,
				0x095cd0e3, 0x0ade222d, 0x06835bbd, 0x00ae74fa,
			},
		),
		// d
		curve.Ed448GoldPoint(
			[16]uint32{
				0x04cc98b8, 0x0aee5526, 0x0deec7ca, 0x03b955ca,
				0x0c9aa144, 0x05a7672d, 0x08f5f53b, 0x03a6963f,
				0x01ea8ec4, 0x0f42b22c, 0x08d7f50d, 0x08ef4899,
				0x029c4fa5, 0x0e5d32f8, 0x0e0f2f1b, 0x0bfc8d3c,
			},
			[16]uint32{
				0x0ee0f693, 0x01e5d3ef, 0x009e0f46, 0x0cd9d776,
				0x0f2c11fa, 0x0d424328, 0x04ace98d, 0x09574f9e,
				0x0f04b094, 0x0c23e744, 0x0cf292c7, 0x09f7df44,
				0x0be029ce, 0x0a60f67d, 0x0797fbf3, 0x0bbb568c,
			},
			[16]uint32{
				0x0f7be5f8, 0x09b2c468, 0x05104f8d, 0x0a4deedc,
				0x0221a851, 0x094b06f2, 0x0185d125, 0x08e747f2,
				0x00b4d17f, 0x0230798a, 0x046de54d, 0x0323e7bc,
				0x09d43f4c, 0x023ee2a9, 0x0af88db3, 0x0672cc85,
			},
			[16]uint32{
				0x049fc147, 0x00ecb653, 0x0fb574a7, 0x03eff8d7,
				0x05b6a752, 0x069d5481, 0x09719845, 0x0a436b44,
				0x05230555, 0x09851029, 0x044f9c9d, 0x069d289f,
				0x0b9314a4, 0x0f35dd2f, 0x0e8e816a, 0x00355c7d,
			},
		),
		// h
		curve.Ed448GoldPoint(
			[16]uint32{
				0x0dc2c86b, 0x062aa269, 0x04784c9d, 0x01750bcf,
				0x00683731, 0x0b198881, 0x0a36ee98, 0x0c24e6cb,
				0x0669a4ce, 0x01980f31, 0x0b1e6f4c, 0x08bdd701,
				0x08d950a1, 0x07bb8ae8, 0x0840a4e0, 0x01cef363,
			},
			[16]uint32{
				0x01ce8ca2, 0x0cc89a87, 0x0188519f, 0x092cebb4,
				0x097a3274, 0x0dbee214, 0x0bdd1dd3, 0x0271ec23,
				0x0d28e056, 0x02c21b7e, 0x0f60b334, 0x0e4b4223,
				0x0f473d83, 0x089718a9, 0x0b075869, 0x0700c433,
			},
			[16]uint32{
				0x035cd394, 0x07926b4e, 0x01d6652e, 0x0baacce0,
				0x0a29339d, 0x08b71b6a, 0x088184c8, 0x099a6fc8,
				0x0d8abc38, 0x0055c583, 0x0bcf735e, 0x03df44e4,
				0x06928a16, 0x0ef21a23, 0x00234218, 0x007d2dd1,
			},
			[16]uint32{
				0x0fb7cd8c, 0x0a32ac22, 0x03199605, 0x0607c466,
				0x0eddad7f, 0x08a71cfc, 0x066944f7, 0x020576e5,
				0x03202796, 0x0138fefd, 0x038b840f, 0x00272913,
				0x0c3082e6, 0x07d44546, 0x0b332340, 0x0b6f354d,
			},
		),
	}

	testSec = &SecretKey{
		// x1
		curve.Ed448GoldScalar([]byte{
			0xc6, 0xd0, 0x98, 0x2e, 0xe4, 0xe5, 0x81, 0xe4,
			0x61, 0x3c, 0x46, 0x99, 0x0a, 0x37, 0x79, 0xc3,
			0xfa, 0xe5, 0xd5, 0x29, 0x27, 0x31, 0xa3, 0x55,
			0x9f, 0x34, 0x91, 0xd1, 0x0c, 0x7f, 0x88, 0x56,
			0x8c, 0x62, 0xe1, 0x86, 0xb7, 0xef, 0xd6, 0xcb,
			0x1b, 0x14, 0x88, 0x3b, 0xc0, 0xfb, 0xac, 0x46,
			0x0c, 0xc7, 0x20, 0x82, 0x3e, 0xd0, 0xdc, 0x2c,
		}),
		// x2
		curve.Ed448GoldScalar([]byte{
			0x7d, 0xbc, 0x55, 0xd7, 0xab, 0x95, 0xd3, 0xca,
			0xb7, 0x40, 0x1f, 0x64, 0xf4, 0xd3, 0x60, 0x2b,
			0xa0, 0xec, 0xed, 0x92, 0x90, 0xf7, 0xc4, 0x5c,
			0x51, 0xd0, 0x22, 0xd7, 0x5e, 0xf1, 0xee, 0x6c,
			0xd3, 0xf9, 0x2b, 0xea, 0xbf, 0x49, 0x94, 0xda,
			0xa5, 0x2c, 0x3b, 0x77, 0xdc, 0x98, 0x0c, 0xc6,
			0x36, 0xdf, 0xb9, 0x49, 0x7b, 0x54, 0x70, 0x05,
		}),
		// y1
		curve.Ed448GoldScalar([]byte{
			0xa5, 0x08, 0xbe, 0x0a, 0x34, 0x92, 0x1b, 0xfc,
			0x23, 0x3e, 0xb1, 0x4b, 0x82, 0x75, 0xa1, 0x9b,
			0x52, 0x85, 0xa6, 0xc5, 0x29, 0x59, 0x4a, 0x5e,
			0xe6, 0x1b, 0x69, 0xa0, 0x47, 0xf9, 0xcf, 0xed,
			0xa9, 0xfa, 0x15, 0xd3, 0x5f, 0x16, 0x11, 0xe7,
			0xa1, 0x84, 0x33, 0x1b, 0x07, 0x84, 0x18, 0x6c,
			0x6a, 0xb0, 0xfa, 0xdb, 0x95, 0x82, 0x26, 0x2c,
		}),
		// y2
		curve.Ed448GoldScalar([]byte{
			0x8b, 0xa2, 0xa9, 0x1a, 0xf1, 0x0b, 0x04, 0x96,
			0x92, 0xf9, 0xd5, 0x97, 0x27, 0x96, 0x6c, 0x8f,
			0x55, 0x6e, 0xf8, 0xdc, 0x85, 0x77, 0xf6, 0x66,
			0x46, 0xf4, 0x2a, 0xcd, 0x8e, 0x42, 0x83, 0xd8,
			0xd2, 0x95, 0xed, 0xc7, 0x24, 0x19, 0x72, 0xf6,
			0xe2, 0xdd, 0x3e, 0x21, 0x3e, 0x3a, 0x35, 0x65,
			0xfc, 0x78, 0x2c, 0x50, 0xfd, 0x0b, 0xfe, 0x1c,
		}),
		// z
		curve.Ed448GoldScalar([]byte{
			0x5b, 0x39, 0x3a, 0xce, 0x70, 0xc2, 0x97, 0x9c,
			0x78, 0x00, 0x74, 0xb9, 0x79, 0xac, 0xfb, 0xff,
			0xa7, 0xb8, 0x5c, 0x64, 0x6b, 0x5a, 0x4d, 0xb3,
			0x59, 0x1b, 0x31, 0x20, 0x4d, 0xdb, 0x16, 0xa5,
			0xf9, 0xb2, 0x88, 0x69, 0x13, 0xf1, 0xb1, 0xf1,
			0x4e, 0x5c, 0x05, 0x2f, 0x9e, 0xed, 0x3e, 0xf0,
			0x6f, 0xe8, 0x4e, 0x81, 0x49, 0x31, 0xfe, 0x3b,
		}),
	}
)

var cs *CramerShoup

func (s *CSSuite) SetUpTest(c *C) {
	cs = &CramerShoup{&curve.Ed448Gold{}}
}

func (s *CSSuite) Test_DeriveSecretKey(c *C) {
	sec, err := cs.deriveSecretKey(testHelpers.FixedRandReader(csRandData))

	c.Assert(sec, DeepEquals, testSec)
	c.Assert(err, IsNil)

	r := make([]byte, 55)
	_, err = cs.GenerateKeys(testHelpers.FixedRandReader(r))

	c.Assert(err, ErrorMatches, "cannot source enough entropy")
}

func (s *CSSuite) Test_KeyGeneration(c *C) {
	keyPair, err := cs.GenerateKeys(testHelpers.FixedRandReader(csRandData))

	c.Assert(testPub.C, DeepEquals, keyPair.Pub.C)
	c.Assert(testPub.D, DeepEquals, keyPair.Pub.D)
	c.Assert(testPub.H, DeepEquals, keyPair.Pub.H)
	c.Assert(err, IsNil)
	c.Assert(testSec.X1, DeepEquals, keyPair.Sec.X1)
	c.Assert(testSec.X2, DeepEquals, keyPair.Sec.X2)
	c.Assert(testSec.Y1, DeepEquals, keyPair.Sec.Y1)
	c.Assert(testSec.Y2, DeepEquals, keyPair.Sec.Y2)
	c.Assert(testSec.Z, DeepEquals, keyPair.Sec.Z)

	keyPair, err = cs.GenerateKeys(testHelpers.FixedRandReader([]byte{0x00}))

	c.Assert(err, ErrorMatches, "cannot source enough entropy")
	c.Assert(keyPair, IsNil)
}

func (s *CSSuite) Test_EncryptAndDecrypt(c *C) {
	keyPair, err := cs.GenerateKeys(rand.Reader)
	csm, err := cs.Encrypt(message, rand.Reader, keyPair.Pub)
	expMessage, err := cs.Decrypt(keyPair.Sec, csm)

	c.Assert(expMessage, DeepEquals, message)
	c.Assert(err, IsNil)

	keyPair, err = cs.GenerateKeys(rand.Reader)
	csm, err = cs.Encrypt(message, testHelpers.FixedRandReader([]byte{0x00}), keyPair.Pub)

	c.Assert(err, ErrorMatches, "cannot source enough entropy")

	keyPair, err = cs.GenerateKeys(rand.Reader)
	csm, err = cs.Encrypt(message, rand.Reader, keyPair.Pub)
	sec := &SecretKey{
		testHelpers.MustCreateRandScalar(),
		testHelpers.MustCreateRandScalar(),
		testHelpers.MustCreateRandScalar(),
		testHelpers.MustCreateRandScalar(),
		testHelpers.MustCreateRandScalar(),
	}
	_, err = cs.Decrypt(sec, csm)

	c.Assert(err, ErrorMatches, "cannot decrypt the message")
}

func (s *CSSuite) Test_ReturnFirstError(c *C) {
	err1 := errors.New("new error 1")
	err2 := errors.New("new error 2")

	err := firstError(err1, err2)

	c.Assert(err, ErrorMatches, "new error 1")
}
